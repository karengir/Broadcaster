{"version":3,"sources":["../../server/helper/tokenVerify.js"],"names":["dotenv","config","tokenVerify","req","res","next","token","header","valid","jwt","verify","process","env","SECRET","user","error","status","json","message"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEAA,mBAAOC,MAAP;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtC,MAAI;AACF,QAAMC,KAAK,GAAGH,GAAG,CAACI,MAAJ,CAAW,OAAX,CAAd;;AACA,QAAMC,KAAK,GAAGC,yBAAIC,MAAJ,CAAWJ,KAAX,EAAkBK,OAAO,CAACC,GAAR,CAAYC,MAA9B,CAAd;;AACAV,IAAAA,GAAG,CAACW,IAAJ,GAAWN,KAAX;AACAH,IAAAA,IAAI;AACL,GALD,CAKE,OAAOU,KAAP,EAAc;AACdX,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,MAAAA,MAAM,EAAE,GADW;AAEnBE,MAAAA,OAAO,EAAE;AAFU,KAArB;AAID;AACF,CAZD;;eAaehB,W","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\n\r\nconst tokenVerify = (req, res, next) => {\r\n  try {\r\n    const token = req.header(\"token\");\r\n    const valid = jwt.verify(token, process.env.SECRET);\r\n    req.user = valid;\r\n    next();\r\n  } catch (error) {\r\n    res.status(400).json({\r\n      status: 400,\r\n      message: \"invalid token\"\r\n    });\r\n  }\r\n};\r\nexport default tokenVerify;\r\n"],"file":"tokenVerify.js"}