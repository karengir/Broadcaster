{"version":3,"sources":["../../server/controlers/authController.js"],"names":["authController","req","res","passwordEncry","body","password","user","id","users","length","firstname","lastname","email","phoneNumber","username","found","find","u","push","status","json","message","data","token","compare","tokn","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;IAEMA,c;;;;;;;;;2BACUC,G,EAAKC,G,EAAK;AACtB;AACA;AACA,UAAMC,aAAa,GAAG,gCAAaF,GAAG,CAACG,IAAJ,CAASC,QAAtB,CAAtB;AACA,UAAMC,IAAI,GAAG;AACXC,QAAAA,EAAE,EAAEC,kBAAMC,MAAN,GAAe,CADR;AAEXC,QAAAA,SAAS,EAAET,GAAG,CAACG,IAAJ,CAASM,SAFT;AAGXC,QAAAA,QAAQ,EAAEV,GAAG,CAACG,IAAJ,CAASO,QAHR;AAIXC,QAAAA,KAAK,EAAEX,GAAG,CAACG,IAAJ,CAASQ,KAJL;AAKXC,QAAAA,WAAW,EAAEZ,GAAG,CAACG,IAAJ,CAASS,WALX;AAMXC,QAAAA,QAAQ,EAAEb,GAAG,CAACG,IAAJ,CAASU,QANR;AAOXT,QAAAA,QAAQ,EAAEF;AAPC,OAAb;;AAUA,UAAMY,KAAK,GAAGP,kBAAMQ,IAAN,CAAW,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACL,KAAF,KAAYN,IAAI,CAACM,KAArB;AAAA,OAAZ,CAAd;;AACA,UAAI,CAACG,KAAL,EAAY;AACVP,0BAAMU,IAAN,CAAWZ,IAAX;;AACAJ,QAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,UAAAA,MAAM,EAAE,GADW;AAEnBE,UAAAA,OAAO,EAAE,2BAFU;AAGnBC,UAAAA,IAAI,EAAEhB,IAHa;AAInBiB,UAAAA,KAAK,EAAE,0BAAUjB,IAAI,CAACM,KAAf,EAAsBN,IAAI,CAACC,EAA3B;AAJY,SAArB;AAMD,OARD,MAQO;AACL,eAAOL,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,UAAAA,MAAM,EAAE,GADkB;AAE1BE,UAAAA,OAAO,EAAE;AAFiB,SAArB,CAAP;AAID;AACF;;;2BAEapB,G,EAAKC,G,EAAK;AACtB,UAAMI,IAAI,GAAG;AACXM,QAAAA,KAAK,EAAEX,GAAG,CAACG,IAAJ,CAASQ,KADL;AAEXP,QAAAA,QAAQ,EAAEJ,GAAG,CAACG,IAAJ,CAASC;AAFR,OAAb;;AAKA,UAAMU,KAAK,GAAGP,kBAAMQ,IAAN,CAAW,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACL,KAAF,KAAYN,IAAI,CAACM,KAArB;AAAA,OAAZ,CAAd;;AACA,UAAIG,KAAJ,EAAW;AACT,YAAMS,OAAO,GAAG,kCAAelB,IAAI,CAACD,QAApB,EAA8BU,KAAK,CAACV,QAApC,CAAhB;;AACA,YAAImB,OAAJ,EAAa;AACX,cAAMC,IAAI,GAAG,0BAAUnB,IAAI,CAACM,KAAf,EAAsBN,IAAI,CAACC,EAA3B,CAAb;AACA,iBAAOL,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,YAAAA,MAAM,EAAE,GADkB;AAE1BI,YAAAA,KAAK,EAAEE,IAFmB;AAG1BJ,YAAAA,OAAO,EAAE;AAHiB,WAArB,CAAP;AAKD,SAPD,MAOO;AACL,iBAAOnB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,YAAAA,MAAM,EAAE,GADkB;AAE1BO,YAAAA,KAAK,EAAE;AAFmB,WAArB,CAAP;AAID;AACF;;AACD,aAAOxB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,QAAAA,MAAM,EAAE,GADkB;AAE1BO,QAAAA,KAAK,EAAE;AAFmB,OAArB,CAAP;AAID;;;;;;eAGY1B,c","sourcesContent":["import bcrypt from \"bcryptjs\";\r\nimport users from \"../models/users\";\r\nimport MakeToken from \"../helper/tokenGen\";\r\nimport { passwordhash, passwordVerify } from \"../helper/passwordHash\";\r\n\r\nclass authController {\r\n  static signup(req, res) {\r\n    // const salt = bcrypt.genSaltSync(10);\r\n    // const passwordEncr = bcrypt.hashSync(req.body.password, salt);\r\n    const passwordEncry = passwordhash(req.body.password);\r\n    const user = {\r\n      id: users.length + 1,\r\n      firstname: req.body.firstname,\r\n      lastname: req.body.lastname,\r\n      email: req.body.email,\r\n      phoneNumber: req.body.phoneNumber,\r\n      username: req.body.username,\r\n      password: passwordEncry\r\n    };\r\n\r\n    const found = users.find(u => u.email === user.email);\r\n    if (!found) {\r\n      users.push(user);\r\n      res.status(201).json({\r\n        status: 201,\r\n        message: \"User successfully created\",\r\n        data: user,\r\n        token: MakeToken(user.email, user.id)\r\n      });\r\n    } else {\r\n      return res.status(409).json({\r\n        status: 409,\r\n        message: \"user already exists\"\r\n      });\r\n    }\r\n  }\r\n\r\n  static signin(req, res) {\r\n    const user = {\r\n      email: req.body.email,\r\n      password: req.body.password\r\n    };\r\n\r\n    const found = users.find(u => u.email === user.email);\r\n    if (found) {\r\n      const compare = passwordVerify(user.password, found.password);\r\n      if (compare) {\r\n        const tokn = MakeToken(user.email, user.id);\r\n        return res.status(200).json({\r\n          status: 200,\r\n          token: tokn,\r\n          message: \"User successfully logged in\"\r\n        });\r\n      } else {\r\n        return res.status(401).json({\r\n          status: 401,\r\n          error: \"Password or email is incorrect\"\r\n        });\r\n      }\r\n    }\r\n    return res.status(404).json({\r\n      status: 404,\r\n      error: \"Password or email is incorrect\"\r\n    });\r\n  }\r\n}\r\n\r\nexport default authController;\r\n"],"file":"authController.js"}